swirl()
above10 <-> function(x) {
use <. x > 10
x[use]
}
above10 <- function(x) {
use <. x > 10
x[use]
}
above10 <- function(x) {
use <- x > 10
x[use]
}
x <- 1:30
above10 (x)
search()
View(c)
View(c.noquote)
View(call)
View(chol.default)
x <- function(sdasd)
class("Pablo")
class(NA)
showMEthods("show")
showMethods("show")
ftype(lm)
ftype(mean)
library(pryr)
install.packages("pryr")
library(pryr)
ftype(mean)
ftype(lm)
ftype(dgamma)
ftype(predict)
ftype(colSums)
install.packages("yhat")
install.packages("fields")
install.packages("yhatr")
setwd("~/R/DevDataProd")
data <- read.csv("WM 2014 Alle Spieler - all players.csv")
View(data)
View(data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
a <- "ANY"
is (a == "ANY") print ("hols")
if (a == "ANY") print ("hols")
a < "OUT"
a <- "OUT"
if (a == "ANY") print ("hols")
a <- "ANY"
if (a == "ANY") print ("hola")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- read.csv("FIFA2014.csv")
data <- read.csv("FIFA2014.csv")
FIFA2014 <- read.csv("~/R/DevDataProd/FIFA2014.csv", header=FALSE)
View(FIFA2014)
shiny::runApp()
shiny::runApp()
FIFA2014 <- read.csv("~/R/DevDataProd/FIFA2014.csv", header=FALSE)
View(FIFA2014)
FIFA2014 <- read.csv("~/R/DevDataProd/FIFA2014.csv", header=TRUE)
View(FIFA2014)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
data <- read.csv("FIFA2014.csv")
summary (data)
head (data)
class(data)
unique(data$Team)
Parameters can be combined to create different criteria
install.packages("parallel")
require(parallel)
require(doParallel)
install.packages("doParallel")
FIFA 2014 Players Database
FIFA 2014 Players Database
shiny::runApp()
author: Pablo Smiraglia
shiny::runApp()
data <- read.csv("FIFA2014.csv")
View(data)
View(data)
summary (data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
hist(data$Liga)
hist(data)
str(data)
dat2 <- data.frame()
hist(table(data))
hist(table(data$Liga))
hist(table(data$Liga), labels = TRUE)
hist(factor(data$Liga), labels = TRUE)
hist(as.factor(data$Liga), labels = TRUE)
barplot((data$Liga), labels = TRUE)
barplot((data$Liga)
q
barplot(data$Liga)
barplot(table(data$Liga)
q
barplot(table(data$Liga))
shiny::runApp()
shiny::runApp()
x = as.factor(data$Liga)
x
plot(x)
plot(x)
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot?
q
?plot
plot(x, main = "National leagues representation")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
x = as.factor(data$Liga)
plot(x)
x = as.factor(data[which(dataClean$Captain == input$cap)$Liga)
x = as.factor(data[which(dataClean$Captain == input$cap)]$Liga)
x = as.factor(data[which(data$Captain == TRUE)]$Liga)
which(data$Captain == TRUE)
data$Liga,which(data$Captain == TRUE)
shiny::runApp()
plot(x)
axis( las = 2)
?plot
shiny::runApp()
shiny::runApp()
shiny::runApp()
plot(x)
plot(x, las=2)
shiny::runApp()
plot(x, las=2)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
```
url <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv"
url2 <- "https://d396qusza40orc.cloudfront.net/predmachlearn/pml-testing.csv"
download.file(url, destfile="pml-training.csv", method = 'curl')
download.file(url2, destfile="pml-testing.csv", method = 'curl')
dataTrain <- read.csv("pml-training.csv")
dataTest <- read.csv("pml-testing.csv")
str(dataTrain)
summary (dataTrain)
names (dataTrain)
View(dataTest)
View(dataTest)
View(dataTrain)
View(dataTrain)
summary(dataTrain)
str(dataTrain)
str(dataTrain$classe)
summary(dataTrain$classe)
isAnyMissing <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
isAnyMissing
!isAnyMissing
isAnyMissing
col <- dataTrain[, isAnyMissing]
View(col)
View(col)
col <- dataTrain[isAnyMissing]
View(col)
View(col)
col <- dataTrain[, !isAnyMissing]
View(col)
View(col)
dim(col)
col <- dataTrain[, !isAnyMissing]
str(col)
dim(col)
varIncomplete <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
dataTrainPrediction <- dataTrain[, varIncomplete]
varIncomplete <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
dataTrainPrediction <- dataTrain[, !varIncomplete]
View(dataTrainPrediction)
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
require(caret)
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
NZVdataTrainModel <- nearZeroVar(dataTrainModel, saveMetrics=TRUE)
View(NZVdataTrainModel)
dataTrainPrediction <- dataTrainPrediction[c(-4)]
View(dataTrainPrediction)
View(dataTrainPrediction)
dataTrainPrediction <- dataTrainPrediction[c(-1)]
View(dataTrainPrediction)
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrain[, !varIncomplete]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
View(dataTrainPrediction)
dataTrainPrediction <- dataTrainPrediction[c(-2)]
View(dataTrainPrediction)
View(dataTrainPrediction)
dataTrainPrediction <- dataTrainPrediction[c(-2)]
dataTrainPrediction <- dataTrainPrediction[c(-2)]
View(dataTrainPrediction)
dataTrainPrediction <- dataTrain[, !varIncomplete]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[c(-2)]
dataTrainPrediction <- dataTrainPrediction[c(-2)]
dataTrainPrediction <- dataTrainPrediction[c(-2)]
View(dataTrainPrediction)
varIncomplete <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
dataTrainPrediction <- dataTrain[, !varIncomplete]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
View(dataTrainPrediction)
names(dataTrain)
grepl("timestamp", names(dataTrain))
grepl("/.timestamp./", names(dataTrain))
grepl(".timestamp.", names(dataTrain))
d <- dataTrain[, grepl(".timestamp.", names(dataTrain))]
View(d)
d <- dataTrain[, !grepl(".timestamp.", names(dataTrain))]
d <- dataTrain[, !grepl(".timestamp.|.timestamp", names(dataTrain))]
d <- dataTrain[, !grepl(".timestamp.|.timestamp|.window", names(dataTrain))]
varIncomplete <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
dataTrainPrediction <- dataTrain[, !varIncomplete]
dataTrainPrediction <- dataTrainPrediction[c(-2)]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[, !grepl(".timestamp.|.timestamp|.window", names(dataTrain))]
dataTrainPrediction <- dataTrainPrediction[, !grepl(".timestamp.|.timestamp|.window", names(dataTrainPrediction))]
View(dataTrainPrediction)
varIncomplete <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
dataTrainPrediction <- dataTrain[, !varIncomplete]
varIncomplete <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
dataTrainPrediction <- dataTrain[, !varIncomplete]
dataTrainPrediction <- dataTrainPrediction[c(-2)]
dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[, !grepl(".timestamp.|.timestamp|.window", names(dataTrainPrediction))]
View(dataTrainPrediction)
View(dataTrain)
varIncomplete <- sapply(dataTrain, function (x) any(is.na(x) | x == ""))
dataTrainPrediction <- dataTrain[, !varIncomplete]
#dataTrainPrediction <- dataTrainPrediction[c(-2)]
#dataTrainPrediction <- dataTrainPrediction[c(-1)]
dataTrainPrediction <- dataTrainPrediction[, !grepl("X|user_name|.timestamp.|.timestamp|.window", names(dataTrainPrediction))]
View(dataTrainPrediction)
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
?preProcess
pre <- preProcess(dataTrainModel)
pre
dataTrainModel <- preProcess(dataTrainModel)
dataTrainModel <- dataTrainPrediction[part, ]
preProcessTrain <- preProcess(dataTrainModel)
preProcessTrain
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
preProc <- preProcess(dataTrainModel)
preProc
X <- predict(PreProc, dataTrainModel)
X <- predict(preProc, dataTrainModel)
X
View(X)
X <- predict(preProc, dataTrainModel)
library(parallel)
library(doParallel)
trainmodel <- train(classe ~ ., data=dataTrainModelPC, method="rf")
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
preProc <- preProcess(dataTrainModel)
preProc
dataTrainModelPC <- predict(preProc, dataTrainModel) # Apply to train set
preProc <- preProcess(dataProbeModel)
dataProbeModelPC <- predict(preProc, dataProbeModel) # Apply to Probe set
trainmodel <- train(classe ~ ., data=dataTrainModelPC, method="rf")
trainmodel <- train(classe ~ ., data=dataTrainModelPC, method="parRF")
library(foreach)
classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF")
q
library(doMC)
install.packages(doMC)
install.packages(multicore)
install.packages(doMC)
library(parralel)
library(parallel)
library(foreach)
classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF")
system.time(classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF"))
classeModel
predProbe <- predict(classeModel, dataProbeModelPC)
confussionnMatrix(predProbe, dataProbeModelPC[, classe])
confussionMatrix(predProbe, dataProbeModelPC[, classe])
confusionMatrix(predProbe, dataProbeModelPC[, classe])
confusionMatrix(predProbe, dataProbeModel[, classe])
confusionMatrix(predProbe, dataProbeModel[, classe])
View(dataProbeModelPC)
View(dataProbeModel)
predProbe <- predict(classeModel, dataProbeModelPC)
predProbe
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
# Pre-process Train set
preProc <- preProcess(dataTrainModel)
preProc
temp <- predict(preProc, dataTrainModel)
dataTrainModelPC <- data.table(data.frame(classe = dataTrainModel[, classe], temp)) # Apply to train set
# Pre-process Probe set
preProc <- preProcess(dataProbeModel)
temp <- predict(preProc, dataProbeModel)
dataProbeModelPC <- data.table(data.frame(classe = dataProbeModel[, classe], temp)) # Apply to train set
require(data.table)
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
# Pre-process Train set
preProc <- preProcess(dataTrainModel)
preProc
temp <- predict(preProc, dataTrainModel)
dataTrainModelPC <- data.table(data.frame(classe = dataTrainModel[, classe], temp)) # Apply to train set
# Pre-process Probe set
preProc <- preProcess(dataProbeModel)
temp <- predict(preProc, dataProbeModel)
dataProbeModelPC <- data.table(data.frame(classe = dataProbeModel[, classe], temp)) # Apply to train set
preProc <- preProcess(dataTrainModel)
preProc
temp <- predict(preProc, dataTrainModel)
dataTrainModelPC <- data.table(data.frame(classe = dataTrainModel[, classe], temp)) # Apply to train set
View(dataTrainModel)
str(dataTrainModel)
part <- createDataPartition(y=dataTrainPrediction$classe, p=0.6, list=FALSE)
dataTrainModel <- dataTrainPrediction[part, ]
dataProbeModel <- dataTrainPrediction[-part, ]
preProc <- preProcess(dataTrainModel)
preProc
dataTrainModelPC <- predict(preProc, dataTrainModel) # Apply to train set
preProc <- preProcess(dataProbeModel)
dataProbeModelPC <- predict(preProc, dataProbeModel) # Apply to Probe set
classeModel
predProbe <- predict(classeModel, dataProbeModelPC)
confusionMatrix(predProbe, dataProbeModelPC[, classe])
confusionMatrix(predProbe, dataProbeModelPC[, $classe])
confusionMatrix(predProbe, dataProbeModelPC$classe)
classeModel$finalModel
save (classeModel, file="classeModel.RData") # we save the model for later use
setwd("~/git/ML-Project")
save (classeModel, file="classeModel.RData") # we save the model for later use
classeModel
varImp(classeModel)
plot(varImp(classeModel))
plot(varImp(classeModel), main = "Final model variable weights")
dataTest <- read.csv("pml-testing.csv")
preProc <- preProcess(dataTest)
dataTestPC <- predict(preProc, dataTest) # Apply to Probe set
load(file="classeModel.RData", verbose=TRUE)
load(file="classeModel.RData")
load(file="classeModel.RData", verbose=TRUE)
results <- predict(classeModel, dataTestPC)
results
dataTestPC <- cbind( results, dataTestPC)
View(dataTestPC)
dataTestPC <- cbind(dataTestPC, results)
dataTestPC
View(dataTestPC)
dataTestPC[, c("user_name","results")]
dataTest <- read.csv("pml-testing.csv")
preProc <- preProcess(dataTest)
dataTestPC <- predict(preProc, dataTest) # Pre-process test dataset
results <- predict(classeModel, dataTestPC, type = "class")
results <- predict(classeModel, dataTestPC, type = "classe")
preProc <- preProcess(dataProbeModel)
dataTestPC <- predict(preProc, dataTest) # Pre-process test dataset
results <- predict(classeModel, dataTestPC)
dataTestPC <- cbind(results, dataTestPC)
dataTestPC[, c("user_name","results")]
pred_classe <- predict(classeModel, dataTestPC)
dataTestPC <- cbind(pred_classe, dataTestPC)
dataTestPC[, c("user_name","pred_classe")]
plot(dataTrain$classe)
plot(dataTrain$classe, main = "Classe distribution")
plot(dataTestPC$classe, main = "Classe distribution")
plot(dataTestPC$pred_classe, main = "Classe distribution")
pml_write_files = function(x){
n = length(x)
path <- "predictionAssignment_files/answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred_classe)
pml_write_files = function(x){
n = length(x)
path <- "answers"
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=file.path(path, filename),quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(pred_classe)
dataTest <- read.csv("pml-testing.csv")
pred_classe <- predict(classeModel, dataTest)
pred_classe
dataTestPC <- predict(preProc, dataTest) # Pre-process test dataset
pred_classe <- predict(classeModel, dataTestPC)
pred_classe
preProc <- preProcess(dataTest)
dataTestPC <- predict(preProc, dataTest) # Pre-process test dataset
pred_classe <- predict(classeModel, dataTestPC)
pred_classe
dataTest <- read.csv("pml-testing.csv")
pred_classe <- predict(classeModel, dataTestPC)
pred_classe <- predict(classeModel, dataTest)
pred_classe
dataTest <- read.csv("pml-testing.csv")
varIncomplete <- sapply(dataTest, function (x) any(is.na(x) | x == ""))
dataTestPrediction <- dataTest[, !varIncomplete]
dataTestPrediction <- dataTestPrediction[, !grepl("X|user_name|.timestamp.|.timestamp|.window", names(dataTestPrediction))]
preProc <- preProcess(dataTestPrediction)
dataTestModelPC <- predict(preProc, dataTestPrediction)
prediction <- predict(classeModel, dataTestModelPC)
prediction
library(doMC)
install.packages("doMC")
install.packages("doSNOW")
registerDoSNOW(makeCluster(4, type="SOCK"))
library "doSNOW"
library (doSNOW)
registerDoSNOW(makeCluster(4, type="SOCK"))
classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF")
system.time(classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF"))
system.time(classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF"))
classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF")
library(doMC)
registerDoMC(cores=4)
classeModel <- train(classe ~ ., data=dataTrainModelPC, method="RF")
system.time(classeModel <- train(classe ~ ., data=dataTrainModelPC, method="rf"))
system.time(classeModel <- train(classe ~ ., data=dataTrainModelPC, method="parRF"))
